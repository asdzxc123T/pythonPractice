# 컴퓨터 :
#   전자제품 : 전기가 흐르고 안 흐르고만 표현 가능
#   모든 데이터는 다 전기의 흐름으로 표현 가능(모스 부호)

# encoding? decoding?
# encoding : 데이터를 전기의 흐름으로 바꾸는 ('ㅋ' -> 1010101)
# decoding : 전기의 흐름 상태인 것을 데이터로 바꾸는 (1010101 -> 'ㅋ')

# 

# 다른 일반적인 PL
#   띄어쓰기, 엔터는 아무 의미 없음 : 문장 구별은 ;로
#   컴파일러(Compiler) 방식
#       프로그램 소스 전체를 한방에 기계어로 번역
#       오류가 나면 최종산출물 파일이 안 나옴
#       설계 -> 소스 -> 기계어 -> 전기흐름(최종산출물) -> 실행

# Python
#   띄어쓰기가 문법적으로 의미 있음
#   문장 구별 : 엔터, ;
#   고급 언어(개발자가 직접 컨트롤 안 해도 자동처리되는 게 많음)
#       사람친화적(쉽다)
#       효율성은 떨어짐
#   인터프리터(Interpreter) 방식
#       프로그램 소스 한줄씩 기계어로 번역해서 실행, 다음줄 번역해서 실행... => 대화식 처리 가능(한 줄 써서 실행해보고, ...)
#       소스 자체가 최종산출물
#       최종산출물이 나왔는데 실행을 해봤더니 오류가 나올 수 있음 => 오류 잡기가 힘듦
#       설계 -> 소스 -> 기계어 -> 전기흐름 -> 실행 -> 소스 다음줄 -> 기계어 -> ...


# error(오류) : PL 문법에 맞지 않게 소스를 생성하여, 기계어로 번역 불가능한 상태 (소스 -> 기계어 과정 ex) print{"aa"})
# comment(주석) : 기계어 번역 대상에서 제외
# ctrl + / : 주석 넣기

# 개발
#   설계(한국어) -> 소스(인간의 언어{Python, C, ...}) -> 기계어(컴퓨터의 언어) -(encoding)-> 전기흐름(01001)

# ctrl + f5 : 실행
# alt + shift + f : 소스정렬
# alt + 화살표 위/아래 (vscode 전용 단축키) : 드래그된 소스 내용 이동
# alt + shift + 화살표 위/아래 : 줄 복사
# ctrl + shift + k : 줄 삭제
# ctrl + spaceBar : 자동완성

# 콘솔창에 ㅋ라고 출력
print("ㅋ")

# 콘솔창에 ㅎ라고 출력
print("ㅎ")
